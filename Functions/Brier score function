#------------------------------------------------------------------------------
# Fonction BRIERSCORE
#------------------------------------------------------------------------------

# time : vecteur de temps jusqu'à la survenue de l'évènement (ordonné dans l'ordre croissant)
# status : vecteur indicateur de censure (1 : non censuré, 0 : censuré) (ordonné dans le meme ordre que le vecteur temps)
# timesurv : vecteur de temps correspondant aux probabilités de survie estimées de la matrice survmat
# matSurv : matrice des probabilités de survie estimées (dimension : n(tsurv) x n(time))
# tcens : vecteur de temps correspondant aux probabilités de survie estimées de censures de la matrice censmat
# matCens : matrice des probabilités de survie estimées de censures (dimension : n(tcens) x n(time))
# tseq : Vecteur de temps pour lesquel on souhaite calculer l'erreur de prédiction
# N : nombre d'individus dans le jeu de données



BrierScore<- function(times,status,timesurv,matSurv,timecens,matCens,tseq,N){
  calcBS <- vector()
  predcentime <- vector()
  predcent <- vector()
  j<-1
  for(t in tseq){
    Itimeinft<- rep(NA,N) # indicateur I(time_i <= t et status_i = 1)
    Itimesupt<- rep(NA,N) # indicateur I(time_i > t)
    Itimeinft <- ifelse(times<=t & status==1,1,0)
    Itimesupt <- ifelse(times>t,1,0)
    
    indsurv<-tail(which(timesurv<=t),1) # pour récupérer la bonne ligne dans la matrice
    pred<-as.numeric(matSurv[indsurv,]) # récupère les prédits de la matrice de survie
    
    indcens<-tail(which(timecens<=t),1) # pour récupérer la bonne ligne dans la matrice
    
    for (i in 1:N){
      predcentime[i]<-as.numeric(matCens[tail(which(timecens<=times[i]),1),i])[1]# G(Ti)
      ifelse(predcentime[i]==0,predcentime[i]<- -Inf,predcentime[i])
      ifelse(is.na(predcentime[i]),predcentime[i]<- -Inf,predcentime[i])
      indice <- tail(which(timecens<=timesurv[i]),1)
      predcent[i]<-as.numeric(matCens[tail(which(timecens<=t),1),indice])[1]# G(t)
    }
    #récuperer les temps du groupe

    
    ifelse(predcent==0,predcent<- -Inf,predcent)
    Partie1 <- Itimeinft*(1/predcentime)*((0-pred)^2)
    Partie2 <-Itimesupt*(1/predcent)*((1-pred)^2)
    
    calcBS[j]<-mean(Partie1+Partie2)
    j <- j+1
  }
  return(data.frame(tseq,calcBS))
}
