
library(survival)
library(dynpred)
library(stats)
library(mexhaz)
library(spBayesSurv)
library(dplyr)

#------------------------------------------------------------------------------
# Dataset - LeukSurv from  
#------------------------------------------------------------------------------

data(LeukSurv)
summary(LeukSurv)
dim(LeukSurv) #9 variables et 1043 patients 
head(LeukSurv)

LeukSurv$time2 <- (LeukSurv$time / 365.24)

# Horizon time
LeukSurv$TH6m <- ifelse(LeukSurv$time2<=0.5 & LeukSurv$cens==1,1,ifelse(LeukSurv$time2<=0.5 & LeukSurv$cens==0,NA,0))
LeukSurv$TH3 <- ifelse(LeukSurv$time2<=3 & LeukSurv$cens==1,1,ifelse(LeukSurv$time2<=3 & LeukSurv$cens==0,NA,0))
LeukSurv$TH8 <- ifelse(LeukSurv$time2<=8 & LeukSurv$cens==1,1,ifelse(LeukSurv$time2<=8 & LeukSurv$cens==0,NA,0))

LeukSurv$time10 <- ifelse(LeukSurv$time2 > 10, 10 ,LeukSurv$time2 )
LeukSurv$cens10 <- ifelse(LeukSurv$time2 > 10, 0 ,LeukSurv$cens )
LeukSurv$censored <- 1- LeukSurv$cens

LeukSurv$agecr <- scale(LeukSurv$age)
LeukSurv$wbccr <- scale(LeukSurv$wbc)
LeukSurv$tpicr <- scale(LeukSurv$tpi)

# UTILE ???? a voir si il faut supprimer
Stime = LeukSurv$time2
status = LeukSurv$cens
utimes = unique(Stime)
utimes = utimes[order(utimes)]

# Mettre les temps dans l'ordre croissant
ord <- order(Stime, -status)
timeord <- Stime[ord]  
statusord <- status[ord] 


#------------------------------------------------------------------------------
# Cox Model
#------------------------------------------------------------------------------

coxfit1 <- coxph(Surv(time2,cens) ~ agecr + sex + wbccr + tpicr,data=LeukSurv)
summary(coxfit1)

coxzph<-cox.zph(coxph(Surv(time2,cens) ~ agecr + sex + wbccr + tpicr,data=LeukSurv))

#------- Pronostique index -------# 

linpred <- LeukSurv$linpred <- coxfit1$linear.predictors
coxfit1x <- coxph(Surv(LeukSurv$time2,LeukSurv$cens) ~ linpred)  
sfcox <- survfit(coxfit1x, newdata = data.frame(x = linpred)) 
sfcoxSurv <- sfcox$surv # matrice de survie COX
sfcoxTime <- sfcox$time
sfcoxSurv[1,1]
indice <- which(sfcoxTime==min(sfcoxTime[sfcoxTime>=3]))
pred3ans<- -sfcoxSurv[indice,]

TIgroupe <-predict(coxfit1,type="risk")
TIgroupe3 <- TIgroupe


#------------------------------------------------------------------------------
# Bspline Model
#------------------------------------------------------------------------------
noeud <- median(LeukSurv$time2[LeukSurv$cens==1])

bsfit <- mexhaz(formula = Surv(time=time2, event=cens) ~ agecr + sex + wbccr + tpicr + nph(agecr),data=LeukSurv, 
                base = "exp.bs", degree = 3, knots=noeud )
summary(bsfit)

# plot of time dependent effect of age over time 
toplot <- riskfunc(bsfit,
         time.pts = seq(1,10,0.2),
         data=  data.frame("agecr"=0.1,"sex"=0 , "wbccr"=0,  "tpicr"=0),
         data.0 =  data.frame("agecr"=0 ,"sex"=0 , "wbccr"=0,  "tpicr"=0),
         type="hr" ,
         conf.int="delta")
plot(toplot)

# plot of baseline hazard over time : lambda0(t)
haz0 = predict(bsfit, time.pts = utimes, data.val = data.frame("agecr"=0 ,"sex"=0 , "wbccr"=0,  "tpicr"=0),data=LeukSurv)$results$hazard
plot(haz0~utimes, type="l")

# Survival matrix
sfBS <- vector()
pred <- vector()
for (i in 1:nrow(LeukSurv)) {
  pred <- predict(bsfit, time.pts=utimes, data.val=data.frame(agecr=LeukSurv$agecr[i],sex=LeukSurv$sex[i],
                                                                wbccr=LeukSurv$wbccr[i],tpicr=LeukSurv$tpicr[i]))$results$surv
  sfBS<-cbind(sfBS,pred)
}
sfbsTime <- utimes

# predict
TIgroupe3 <- vector()
for (j in 1:nrow(LeukSurv)) {
  res <- -log(predict(bsfit, time.pts=3,  
                      data.val=data.frame(agecr=LeukSurv$agecr[j],sex=LeukSurv$sex[j],
                                          wbccr=LeukSurv$wbccr[j],tpicr=LeukSurv$tpicr[j]))$result$surv)
  TIgroupe3<-c(TIgroupe3,res)
}


#------------------------------------------------------------------------------
# General Hazard Model
#------------------------------------------------------------------------------

# Matrice de design
X <- model.matrix(Surv(time=time2, event=cens) ~ agecr + sex + wbccr + tpicr,data=LeukSurv)[,-1]
dim(X)
XTD <- as.matrix(model.matrix(Surv(time=time2, event=cens) ~ agecr,data=LeukSurv)[,-1])

mod_gen <- PGWMLE(rep(0, 3 + ncol(X) + ncol(XTD)),LeukSurv$time2,LeukSurv$cens, hstr = "PGWGH", des = X,des_t=XTD, method="nlminb",maxit=10000)
mod_gen

AICPGWGH <- 2*mod_gen$objective + 2*length(mod_gen$par)

# Récupération des coefs :
n <- length(LeukSurv$time2)
p0 <- dim(XTD)[2]
p1 <- dim(X)[2]
coef <- mod_gen$par
ae0 <- exp(coef[1]); be0 <- exp(coef[2]);  ce0 <- exp(coef[3])
beta0 <- coef[4:(3+p0)]
beta1 <- coef[(4+p0):(3+p0+p1)]

exp.x.beta0 <- as.vector(exp(XTD%*%beta0))
exp.x.beta1 <- as.vector(exp(X%*%beta1))
exp.x.beta.dif <- as.vector(exp(X%*%beta1 - XTD%*%beta0))


# La formule du taux cumulé : H(t) = H0(t exp(X*B1)*exp((X*B2 - X*B1))
# Formule de la survie : S(t) = exp(-H(t))

sfGH <- vector()
predGH <- vector()
for(i in 1:nrow(LeukSurv)){
  predGH <- exp(-(chpgw(utimes*exp.x.beta0[i],ae0,be0,ce0)*exp.x.beta.dif[i]))
  sfGH <- cbind(sfGH,predGH)
}
tsurvGH <- utimes







############################################################## 
#               Calibration at 6 months
############################################################## 
########
# COX
########
indice<-which(sfcoxTime==min(sfcoxTime[sfcoxTime>=0.5]))[1]
pred6COX<-1-sfcoxSurv[indice,]   # predict at 6 months
names(pred6COX)<-c(1:length(pred6COX))
pred6COX_sort <-sort(pred6COX)
quantileCox6m<-quantile(pred6COX_sort,probs = seq(0.1,1,0.1))
calibCOX6m <-calibQuantile(quantileCox6m,vecpred=pred6COX_sort,vecobs=LeukSurv$TH6m)
########
# BS
########
indiceBS<-which(sfbsTime==min(sfbsTime[sfbsTime>=0.5]))[1]
pred6BS<-1-sfBS[indiceBS,]   # predict at 6 months
names(pred6BS)<-c(1:length(pred6BS))
pred6BS_sort <-sort(pred6BS)
quantileBS6m<-quantile(pred6BS_sort,probs = seq(0.1,1,0.1))
calibBS6m <-calibQuantile(quantileBS6m,vecpred=pred6BS_sort,vecobs=LeukSurv$TH6m)
########
# GH
########
indiceGH<-which(tsurvGH==min(tsurvGH[tsurvGH>=0.5]))[1]
pred6GH<-1-sfGH[indiceGH,]   # predict at 6 months
names(pred6GH)<-c(1:length(pred6GH))
pred6GH_sort <-sort(pred6GH)
quantileGH6m<-quantile(pred6GH_sort,probs = seq(0.1,1,0.1))
calibGH6m <-calibQuantile(quantileGH6m,vecpred=pred6GH_sort,vecobs=LeukSurv$TH6m)

############################################################## 
#               Calibration at 3 years
############################################################## 
########
# COX
########
indice<-which(sfcoxTime==min(sfcoxTime[sfcoxTime>=3]))[1]
pred3COX<-1-sfcoxSurv[indice,]   # predict at 3 years
names(pred3COX)<-c(1:length(pred3COX))
pred3COX_sort <-sort(pred3COX)
quantileCox3y<-quantile(pred3COX_sort,probs = seq(0.1,1,0.1))
calibCOX3y <-calibQuantile(quantileCox3y,vecpred=pred3COX_sort,vecobs=LeukSurv$TH3)
########
# BS
########
indiceBS<-which(sfbsTime==min(sfbsTime[sfbsTime>=3]))[1]
pred3BS<-1-sfBS[indiceBS,]       # predict at 3 years
names(pred3BS)<-c(1:length(pred3BS))
pred3BS_sort <-sort(pred3BS)
quantileBS3y<-quantile(pred3BS_sort,probs = seq(0.1,1,0.1))
calibBS3y <-calibQuantile(quantileBS3y,vecpred=pred3BS_sort,vecobs=LeukSurv$TH3)
########
# GH
########
indiceGH<-which(tsurvGH==min(tsurvGH[tsurvGH>=3]))[1]
pred3GH<-1-sfGH[indiceGH,]       # predict at 3 years
names(pred3GH)<-c(1:length(pred3GH))
pred3GH_sort <-sort(pred3GH)
quantileGH3y<-quantile(pred3GH_sort,probs = seq(0.1,1,0.1))
calibGH3y <-calibQuantile(quantileGH3y,vecpred=pred3GH_sort,vecobs=LeukSurv$TH3)

############################################################## 
#               Calibration at 8 years
############################################################## 
########
# COX
########
indice<-which(sfcoxTime==min(sfcoxTime[sfcoxTime>=8]))[1]
pred8COX<-1-sfcoxSurv[indice,]   # predict at 8 years
names(pred8COX)<-c(1:length(pred8COX))
pred8COX_sort <-sort(pred8COX)
quantileCox8y<-quantile(pred8COX_sort,probs = seq(0.1,1,0.1))
calibCOX8y <-calibQuantile(quantileCox8y,vecpred=pred8COX_sort,vecobs=LeukSurv$TH8)
########
# BS
########
indiceBS<-which(sfbsTime==min(sfbsTime[sfbsTime>=8]))[1]
pred8BS<-1-sfBS[indiceBS,]   # predict at 8 years
names(pred8BS)<-c(1:length(pred8BS))
pred8BS_sort <-sort(pred8BS)
quantileBS8y<-quantile(pred8BS_sort,probs = seq(0.1,1,0.1))
calibBS8y <-calibQuantile(quantileBS8y,vecpred=pred8BS_sort,vecobs=LeukSurv$TH8)
########
# GH
########
indiceGH<-which(tsurvGH==min(tsurvGH[tsurvGH>=8]))[1]
pred8GH<-1-sfGH[indiceGH,]   # predict at 8 years
names(pred8GH)<-c(1:length(pred8GH))
pred8GH_sort <-sort(pred8GH)
quantileGH8y<-quantile(pred8GH_sort,probs = seq(0.1,1,0.1))
calibGH8y <-calibQuantile(quantileGH8y,vecpred=pred8GH_sort,vecobs=LeukSurv$TH8)





######################################################################################
#               BRIER SCORE
######################################################################################
# Censoring matrix (Inverse proobability weighting)
coxcens <- coxph(Surv(time2, 1-cens) ~ 1,data = LeukSurv) 
ycens  <- coxcens[["y"]]
pgroupe <- ncol(ycens)
tcens <- ycens[, pgroupe - 1]
dcens <- ycens[, pgroupe]
xcens  <- coxcens$linear.predictors
coxcens  <- coxph(Surv(tcens , dcens ) ~ xcens)

sfcens  <- survfit(coxcens, newdata = data.frame(x = xcens ), type = "kalbfl")
tcens  <- sfcens$time
censcox <- sfcens$surv

bsCOX <-BrierScore(LeukSurv$time2, LeukSurv$cens, sfcoxTime, sfcoxSurv, tcens, censcox, sort(unique(LeukSurv$time10)),N=length(sfcoxTime))
bsBS <-BrierScore(LeukSurv$time2, LeukSurv$cens, sfbsTime, sfBS, tcens, censcox, sort(unique(LeukSurv$time10)),N=length(sfbsTime))
bsGEN <-BrierScore(LeukSurv$time2, LeukSurv$cens, tsurvGH, sfGH, tcens, censcox, sort(unique(LeukSurv$time10)),N=length(tsurvGH))

#plot
plot(0,0,col="white",xlab="Time",ylab="BS(t)",xlim=c(0,8),ylim=c(0,0.3), cex.lab=1.5,cex.axis=1.5,
     cex.main=1.5,panel.first=abline(v=seq(0,8,by=0.5), h=seq(0,0.3,by=0.01), lty=8, col="grey"))
lines(bsCOX[,1],bsCOX[,2],col="black",type="s",lty=1)
lines(bsBS[,1],bsBS[,2],col="black",type="s",lty=2)
lines(bsGEN[,1],bsGEN[,2],col="black",type="s",lty=4)

legend("topright",legend=c("Cox model","Bspline-based model","General model"),col="black",lty=c(1,2,4))




######################################################################################
#              AUC cumulative dynamic
######################################################################################

#-----------------------------------------------------------------#
# Construction de l'AUC
#-----------------------------------------------------------------#


KMreverse <- survfit(Surv(time2, 1-cens)~1,data= LeukSurv) #KM reverse 
KMreverse$surv # probabilité d'être non censuré 
summary(KMreverse,times=1.3)$surv # probabilité d'être non censuré au temps t




# ************************************************
#
# COX MODEL
#
# ************************************************

AUC.Cox<- rep(NA,length(myt))


for (t in myt){
  
  predict.all <- 1-sfcoxSurv[which(t==myt),]
  
  ScZ.all <- summary(KMreverse,times=LeukSurv$time2)$surv
  Sct <- summary(KMreverse,times=t)$surv
  
  # Initialize AUCnumerator to zero
  AUCnumerator <- 0
  
  for (i in 1:nrow(LeukSurv)) {
    
    I1=(LeukSurv$time2[i]<= t)
    I2=(LeukSurv$time2 > t)
    
    predictI <- predict.all[i]
    predictJ <- predict.all
    I3=(predictI>predictJ)
    
    di <- LeukSurv$cens[i]
    
    ScZi <- ScZ.all[i]
    
    # print(I1*I2*I3*di*(1/(ScZi*Sct)))
    if (i < nrow(LeukSurv)) {
      AUCij = sum(I1*I2*I3*di*(1/(ScZi*Sct))) # print(AUCij)
      AUCnumerator <- sum(AUCnumerator, AUCij)}
    
    if (i == nrow(LeukSurv) & (ScZi*Sct)==0) {AUCij = sum(I1*I2*I3*di*0); AUCnumerator <- sum(AUCnumerator, AUCij)}
    if (i == nrow(LeukSurv) & (ScZi*Sct)>0) {AUCij = sum(I1*I2*I3*di*(1/(ScZi*Sct)));AUCnumerator <- sum(AUCnumerator, AUCij)}
    # print(AUCij)
  }
  
  # AUCnumerator
  
  #Dénominateur de l'AUC
  KM <- survfit(Surv(time2, cens)~1, data=LeukSurv) #KM
  St <- summary(KM,times=t)$surv
  
  AUCdenom <- St*(1-St)*(nrow(LeukSurv))^2
  
  
  AUC.Cox[which(t==myt)] <- AUCnumerator/AUCdenom
  
}


# ************************************************
#
# BSpline MODEL
#
# ************************************************


#Numérateur de l'AUC
myt=unique(LeukSurv$time2)
AUC.BS<- rep(NA,length(myt))

for (t in myt){

predict.all <- 1-sfBS[which(t==myt),]
ScZ.all <- summary(KMreverse,times=LeukSurv$time2)$surv
Sct <- summary(KMreverse,times=t)$surv

# Initialize AUCnumerator to zero
AUCnumerator <- 0

for (i in 1:nrow(LeukSurv)) {
  
I1=(LeukSurv$time2[i]<= t)
I2=(LeukSurv$time2 > t)

predictI <- predict.all[i]
predictJ <- predict.all
I3=(predictI>predictJ)

di <- LeukSurv$cens[i]

ScZi <- ScZ.all[i]

# print(I1*I2*I3*di*(1/(ScZi*Sct)))
if (i < nrow(LeukSurv)) {
        AUCij = sum(I1*I2*I3*di*(1/(ScZi*Sct))) # print(AUCij)
        AUCnumerator <- sum(AUCnumerator, AUCij)}

if (i == nrow(LeukSurv) & (ScZi*Sct)==0) {AUCij = sum(I1*I2*I3*di*0); AUCnumerator <- sum(AUCnumerator, AUCij)}
if (i == nrow(LeukSurv) & (ScZi*Sct)>0) {AUCij = sum(I1*I2*I3*di*(1/(ScZi*Sct)));AUCnumerator <- sum(AUCnumerator, AUCij)}
# print(AUCij)
   }

# AUCnumerator

#Dénominateur de l'AUC
KM <- survfit(Surv(time2, cens)~1, data=LeukSurv) #KM
St <- summary(KM,times=t)$surv

AUCdenom <- St*(1-St)*(nrow(LeukSurv))^2


AUC.BS[which(t==myt)] <- AUCnumerator/AUCdenom

}








# ************************************************
#
# GH MODEL
#
# ************************************************
AUC.GH<- rep(NA,length(myt))

for (t in myt){
  
  predict.all <- 1-sfGH[which(t==myt),]
  
  ScZ.all <- summary(KMreverse,times=LeukSurv$time2)$surv
  Sct <- summary(KMreverse,times=t)$surv
  
  # Initialize AUCnumerator to zero
  AUCnumerator <- 0
  
  for (i in 1:nrow(LeukSurv)) {
    
    I1=(LeukSurv$time2[i]<= t)
    I2=(LeukSurv$time2 > t)
    
    predictI <- predict.all[i]
    predictJ <- predict.all
    I3=(predictI>predictJ)
    
    di <- LeukSurv$cens[i]
    
    ScZi <- ScZ.all[i]
    
    # print(I1*I2*I3*di*(1/(ScZi*Sct)))
    if (i < nrow(LeukSurv)) {
      AUCij = sum(I1*I2*I3*di*(1/(ScZi*Sct))) # print(AUCij)
      AUCnumerator <- sum(AUCnumerator, AUCij)}
    
    if (i == nrow(LeukSurv) & (ScZi*Sct)==0) {AUCij = sum(I1*I2*I3*di*0); AUCnumerator <- sum(AUCnumerator, AUCij)}
    if (i == nrow(LeukSurv) & (ScZi*Sct)>0) {AUCij = sum(I1*I2*I3*di*(1/(ScZi*Sct)));AUCnumerator <- sum(AUCnumerator, AUCij)}
    # print(AUCij)
  }
  
  # AUCnumerator
  
  #Dénominateur de l'AUC
  KM <- survfit(Surv(time2, cens)~1, data=LeukSurv) #KM
  St <- summary(KM,times=t)$surv
  
  AUCdenom <- St*(1-St)*(nrow(LeukSurv))^2
  
  
  AUC.GH[which(t==myt)] <- AUCnumerator/AUCdenom
  
}


par(mfrow=c(1,1))
plot(0,0,col="white",ylab="AUC(t)",xlab="Time (years)",xlim=c(0,8),ylim=c(0.5,1), cex.lab=1.5,cex.axis=1.5,
     cex.main=1.5,panel.first=abline(v=seq(0,8,by=0.5), h=seq(0,1,by=0.1), lty=8, col="grey"))
lines(myt, AUC.Cox, type="l")
lines(myt, AUC.BS, type="l", lty=2 )
lines(myt, AUC.GH, type="l", lty = 4)
legend("topleft",legend=c("Cox model","Bspline model","GH model"),lty=c(1,2,4))
























